// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var $$String = require("bs-platform/lib/js/string.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Caml_obj = require("bs-platform/lib/js/caml_obj.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");
var BrowserLogger = require("bs-log/src/BrowserLogger.bs.js");
var Path$KaroshibeeReTree = require("../src/Path.bs.js");
var IDTree$KaroshibeeReTree = require("../src/IDTree.bs.js");
var Identity$KaroshibeeReTree = require("../src/Identity.bs.js");

Jest.describe("canMakeEmpty", (function (param) {
        var p = IDTree$KaroshibeeReTree.empty(/* () */0);
        Jest.test("hasNoChildren", (function (param) {
                return Jest.Expect.toBe(0, Jest.Expect.expect(Belt_Map.size(p.children)));
              }));
        Jest.test("emptyIsRootId", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(p.me === Identity$KaroshibeeReTree.FocusId.create("root")));
              }));
        Jest.test("emptyIsRootFlag", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(p.isRoot));
              }));
        return Jest.test("emptyIsRoot", (function (param) {
                      return Jest.Expect.toBe(true, Jest.Expect.expect(Caml_obj.caml_equal(Belt_Option.getExn(IDTree$KaroshibeeReTree.rootId(p)), Identity$KaroshibeeReTree.FocusId.create("root"))));
                    }));
      }));

Jest.describe("addImmediateChildren", (function (param) {
        var t = IDTree$KaroshibeeReTree.empty(/* () */0);
        var path = Path$KaroshibeeReTree.Parents.fromList(/* [] */0);
        var id = Identity$KaroshibeeReTree.FocusId.create("child1");
        var t2 = IDTree$KaroshibeeReTree.addChild(t, path, id);
        Jest.test("oneChildAdded", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Belt_Map.size(t2.children)));
              }));
        Jest.test("childIsInChildrenCollection", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(t2.children, Identity$KaroshibeeReTree.ChildId.create("child1"))));
              }));
        Jest.test("childIsNotRoot", (function (param) {
                var child1 = Belt_Map.getExn(t2.children, Identity$KaroshibeeReTree.ChildId.create("child1"));
                return Jest.Expect.toBe(false, Jest.Expect.expect(child1.isRoot));
              }));
        var id$1 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var t3 = IDTree$KaroshibeeReTree.addChild(t2, path, id$1);
        Jest.test("secondChildIsAdded", (function (param) {
                return Jest.Expect.toBe(2, Jest.Expect.expect(Belt_Map.size(t3.children)));
              }));
        Jest.test("secondChildIsInChildrenCollection", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(t3.children, Identity$KaroshibeeReTree.convertFocusToChild(id$1))));
              }));
        BrowserLogger.debug("IDTree_test-KaroshibeeReTree", $$String.concat(",", Belt_List.fromArray(Belt_Array.map(IDTree$KaroshibeeReTree.getAllPaths(t3), (function (d) {
                            return "{" + (Identity$KaroshibeeReTree.ChildId.toString(d[0]) + ("::" + (Path$KaroshibeeReTree.Parents.toString(d[1]) + "}")));
                          })))));
        return Jest.test("secondChildIsNotRoot", (function (param) {
                      var child2 = Belt_Map.getExn(t3.children, Identity$KaroshibeeReTree.convertFocusToChild(id$1));
                      return Jest.Expect.toBe(false, Jest.Expect.expect(child2.isRoot));
                    }));
      }));

Jest.describe("addLowDownChildren", (function (param) {
        var t = IDTree$KaroshibeeReTree.empty(/* () */0);
        var path = Path$KaroshibeeReTree.Parents.fromList(/* :: */[
              "1",
              /* :: */[
                "2",
                /* :: */[
                  "3",
                  /* [] */0
                ]
              ]
            ]);
        var id = Identity$KaroshibeeReTree.FocusId.create("child1");
        var t2 = IDTree$KaroshibeeReTree.addChild(t, path, id);
        var t3 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(t2.children, Identity$KaroshibeeReTree.ChildId.create("3"))), Identity$KaroshibeeReTree.ChildId.create("2"))), Identity$KaroshibeeReTree.ChildId.create("1"));
        Jest.test("oneChildAdded", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t3))));
              }));
        Jest.test("childIsInChildrenCollection", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t3), Identity$KaroshibeeReTree.ChildId.create("child1"))));
              }));
        Jest.test("childIsNotRoot", (function (param) {
                var child1 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t3), Identity$KaroshibeeReTree.convertFocusToChild(id));
                return Jest.Expect.toBe(false, Jest.Expect.expect(child1.isRoot));
              }));
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var t4 = IDTree$KaroshibeeReTree.addChild(t2, path, id2);
        var t5 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t4), Identity$KaroshibeeReTree.ChildId.create("3"))), Identity$KaroshibeeReTree.ChildId.create("2"))), Identity$KaroshibeeReTree.ChildId.create("1"));
        Jest.test("twoChildAdded", (function (param) {
                return Jest.Expect.toBe(2, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t5))));
              }));
        Jest.test("secondChildIsInChildrenCollection", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t5), Identity$KaroshibeeReTree.ChildId.create("child2"))));
              }));
        return Jest.test("secondChildIsNotRoot", (function (param) {
                      var child2 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t5), Identity$KaroshibeeReTree.convertFocusToChild(id2));
                      return Jest.Expect.toBe(false, Jest.Expect.expect(child2.isRoot));
                    }));
      }));

Jest.describe("addInnerChild", (function (param) {
        var path1 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "a",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "b",
                  /* [] */0
                ]
              ]
            ]);
        var path3 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "c",
                /* [] */0
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var id3 = Identity$KaroshibeeReTree.FocusId.create("child3");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path2, id2), path3, id3);
        var path4 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "d",
                /* [] */0
              ]
            ]);
        var t2 = IDTree$KaroshibeeReTree.addChild(t, path4, Identity$KaroshibeeReTree.FocusId.create("child4"));
        var t3 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t2), Identity$KaroshibeeReTree.ChildId.create("2"));
        Jest.test("dIsChild", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t3), Identity$KaroshibeeReTree.ChildId.create("d"))));
              }));
        return Jest.test("dHasChild2", (function (param) {
                      var p = "d";
                      var c = "child4";
                      return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t3), Identity$KaroshibeeReTree.ChildId.create(p))), Identity$KaroshibeeReTree.ChildId.create(c))));
                    }));
      }));

Jest.describe("removeImmediateChildren", (function (param) {
        var path = Path$KaroshibeeReTree.Parents.fromList(/* [] */0);
        var id = Identity$KaroshibeeReTree.FocusId.create("child1");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path, id);
        var t1 = IDTree$KaroshibeeReTree.removeChild(t, path, Identity$KaroshibeeReTree.ChildId.create("child1"));
        Jest.test("oneChildRemoved", (function (param) {
                return Jest.Expect.toBe(0, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t1))));
              }));
        return Jest.test("childIsNotInChildrenCollection", (function (param) {
                      return Jest.Expect.toBe(false, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t1), Identity$KaroshibeeReTree.ChildId.create("child1"))));
                    }));
      }));

Jest.describe("removeDeepChildren", (function (param) {
        var path = Path$KaroshibeeReTree.Parents.fromList(/* :: */[
              "1",
              /* :: */[
                "2",
                /* :: */[
                  "3",
                  /* [] */0
                ]
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path, id1), path, id2);
        var t1 = IDTree$KaroshibeeReTree.removeChild(t, path, Identity$KaroshibeeReTree.ChildId.create("child1"));
        var t2 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t1), Identity$KaroshibeeReTree.ChildId.create("3"))), Identity$KaroshibeeReTree.ChildId.create("2"))), Identity$KaroshibeeReTree.ChildId.create("1"));
        Jest.test("oneChildRemoved", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Belt_Map.size(t2.children)));
              }));
        Jest.test("child1IsNotInChildrenCollection", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Belt_Map.has(t2.children, Identity$KaroshibeeReTree.convertFocusToChild(id1))));
              }));
        return Jest.test("child2IsStillInChildrenCollection", (function (param) {
                      return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(t2.children, Identity$KaroshibeeReTree.convertFocusToChild(id2))));
                    }));
      }));

Jest.describe("removeDeepChildren2", (function (param) {
        var path1 = Path$KaroshibeeReTree.Parents.fromList(/* :: */[
              "1",
              /* :: */[
                "2",
                /* :: */[
                  "3",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromList(/* :: */[
              "1",
              /* :: */[
                "2",
                /* :: */[
                  "3",
                  /* :: */[
                    "4",
                    /* [] */0
                  ]
                ]
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var id3 = Identity$KaroshibeeReTree.FocusId.create("child3");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path1, id2), path2, id3);
        var t1 = IDTree$KaroshibeeReTree.removeChild(t, path1, Identity$KaroshibeeReTree.ChildId.create("child2"));
        var t2 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t1), Identity$KaroshibeeReTree.ChildId.create("3"))), Identity$KaroshibeeReTree.ChildId.create("2"))), Identity$KaroshibeeReTree.ChildId.create("1"));
        Jest.test("oneChildRemoved", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t2))));
              }));
        Jest.test("child1IsStillInChildrenCollection", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t2), Identity$KaroshibeeReTree.ChildId.create("child1"))));
              }));
        Jest.test("child2IsNotInChildrenCollection", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t2), Identity$KaroshibeeReTree.ChildId.create("child2"))));
              }));
        var t3 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t1), Identity$KaroshibeeReTree.ChildId.create("4"))), Identity$KaroshibeeReTree.ChildId.create("3"))), Identity$KaroshibeeReTree.ChildId.create("2"))), Identity$KaroshibeeReTree.ChildId.create("1"));
        Jest.test("oneChildRemoved", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t3))));
              }));
        return Jest.test("child1IsStillInChildrenCollection", (function (param) {
                      return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t3), Identity$KaroshibeeReTree.ChildId.create("child3"))));
                    }));
      }));

Jest.describe("removeNonExistantChildren", (function (param) {
        var path1 = Path$KaroshibeeReTree.Parents.fromList(/* :: */[
              "1",
              /* :: */[
                "2",
                /* :: */[
                  "3",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromList(/* :: */[
              "1",
              /* :: */[
                "3",
                /* :: */[
                  "4",
                  /* [] */0
                ]
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path1, id2);
        var t1 = IDTree$KaroshibeeReTree.removeChild(t, path1, Identity$KaroshibeeReTree.ChildId.create("child3"));
        var t2 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t1), Identity$KaroshibeeReTree.ChildId.create("3"))), Identity$KaroshibeeReTree.ChildId.create("2"))), Identity$KaroshibeeReTree.ChildId.create("1"));
        Jest.test("noChildRemoved", (function (param) {
                return Jest.Expect.toBe(2, Jest.Expect.expect(Belt_Map.size(t2.children)));
              }));
        var t1$1 = IDTree$KaroshibeeReTree.removeChild(t, path2, Identity$KaroshibeeReTree.ChildId.create("child1"));
        var t2$1 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t1$1), Identity$KaroshibeeReTree.ChildId.create("3"))), Identity$KaroshibeeReTree.ChildId.create("2"))), Identity$KaroshibeeReTree.ChildId.create("1"));
        return Jest.test("noChildRemoved", (function (param) {
                      return Jest.Expect.toBe(2, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t2$1))));
                    }));
      }));

Jest.describe("removeInnerChild", (function (param) {
        var path1 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "a",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "b",
                  /* [] */0
                ]
              ]
            ]);
        var path3 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "c",
                /* [] */0
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var id3 = Identity$KaroshibeeReTree.FocusId.create("child3");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path2, id2), path3, id3);
        var t2 = IDTree$KaroshibeeReTree.removeChild(t, Path$KaroshibeeReTree.Parents.fromList(/* :: */[
                  "2",
                  /* [] */0
                ]), Identity$KaroshibeeReTree.ChildId.create("1"));
        var t3 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t2), Identity$KaroshibeeReTree.ChildId.create("2"));
        Jest.test("abMovedUp", (function (param) {
                BrowserLogger.debug("IDTree_test-KaroshibeeReTree", IDTree$KaroshibeeReTree.toString(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t2), Identity$KaroshibeeReTree.ChildId.create("2"))));
                return Jest.Expect.toBe(3, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t3))));
              }));
        var check = function (s) {
          return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t3), Identity$KaroshibeeReTree.ChildId.create(s))));
        };
        Jest.test("aIsChild", (function (param) {
                return check("a");
              }));
        Jest.test("bIsChild", (function (param) {
                return check("b");
              }));
        Jest.test("cIsChild", (function (param) {
                return check("c");
              }));
        var check2 = function (p, c) {
          return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t3), Identity$KaroshibeeReTree.ChildId.create(p))), Identity$KaroshibeeReTree.ChildId.create(c))));
        };
        Jest.test("aIsChild2", (function (param) {
                return check2("a", "child1");
              }));
        Jest.test("bIsChild2", (function (param) {
                return check2("b", "child2");
              }));
        return Jest.test("cIsChild2", (function (param) {
                      return check2("c", "child3");
                    }));
      }));

Jest.describe("getChildPaths", (function (param) {
        var path0 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* [] */0
            ]);
        var path1 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "a",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "b",
                  /* [] */0
                ]
              ]
            ]);
        var path3 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "c",
                /* [] */0
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var id3 = Identity$KaroshibeeReTree.FocusId.create("child3");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path2, id2), path3, id3);
        BrowserLogger.debugWithData("IDTree_test-KaroshibeeReTree", "test tree: " + IDTree$KaroshibeeReTree.toString(t), /* tuple */[
              "",
              ""
            ]);
        Jest.test("gotAllChildren", (function (param) {
                var paths = IDTree$KaroshibeeReTree.getChildPaths(t, path0, false);
                return Jest.Expect.toBe(7, Jest.Expect.expect(paths.length));
              }));
        Jest.test("gotFourChildren", (function (param) {
                var paths = IDTree$KaroshibeeReTree.getChildPaths(t, Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
                          "2",
                          /* :: */[
                            "1",
                            /* [] */0
                          ]
                        ]), false);
                return Jest.Expect.toBe(4, Jest.Expect.expect(paths.length));
              }));
        Jest.test("gotFourChildIds", (function (param) {
                var paths = IDTree$KaroshibeeReTree.getChildIds(t, Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
                          "2",
                          /* :: */[
                            "1",
                            /* [] */0
                          ]
                        ]), false);
                return Jest.Expect.toBe(4, Jest.Expect.expect(paths.length));
              }));
        var paths = IDTree$KaroshibeeReTree.getChildPaths(t, path3, false);
        Jest.test("gotOnlyOne", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(paths.length));
              }));
        Jest.test("gotChild3", (function (param) {
                var pr = Belt_Array.getExn(paths, 0);
                BrowserLogger.debugWithData("IDTree_test-KaroshibeeReTree", "pr:" + Identity$KaroshibeeReTree.ChildId.toString(pr[0]), /* tuple */[
                      "",
                      ""
                    ]);
                BrowserLogger.debugWithData("IDTree_test-KaroshibeeReTree", "id3:" + Identity$KaroshibeeReTree.FocusId.toString(id3), /* tuple */[
                      "",
                      ""
                    ]);
                return Jest.Expect.toBe(true, Jest.Expect.expect(Caml_obj.caml_equal(pr[0], Identity$KaroshibeeReTree.convertFocusToChild(id3))));
              }));
        Jest.test("gotChild3Path", (function (param) {
                var pr = Belt_Array.getExn(paths, 0);
                BrowserLogger.debugWithData("IDTree_test-KaroshibeeReTree", "pr:" + Path$KaroshibeeReTree.Parents.toString(pr[1]), /* tuple */[
                      "",
                      ""
                    ]);
                BrowserLogger.debugWithData("IDTree_test-KaroshibeeReTree", "id3:" + Path$KaroshibeeReTree.Parents.toString(path3), /* tuple */[
                      "",
                      ""
                    ]);
                return Jest.Expect.toBe(true, Jest.Expect.expect(Path$KaroshibeeReTree.Parents.eq(pr[1], path3)));
              }));
        return Jest.test("gotNone", (function (param) {
                      var paths = IDTree$KaroshibeeReTree.getChildIds(t, Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
                                "20",
                                /* :: */[
                                  "10",
                                  /* [] */0
                                ]
                              ]), false);
                      return Jest.Expect.toBe(0, Jest.Expect.expect(paths.length));
                    }));
      }));

Jest.describe("_getTests", (function (param) {
        var path1 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "a",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "b",
                  /* [] */0
                ]
              ]
            ]);
        var path3 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "c",
                /* [] */0
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var id3 = Identity$KaroshibeeReTree.FocusId.create("child3");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path2, id2), path3, id3);
        Jest.test("_getFromRoot", (function (param) {
                var cids = {
                  contents: /* [] */0
                };
                IDTree$KaroshibeeReTree._get(t, Path$KaroshibeeReTree.Parents.empty(/* () */0), cids, true);
                BrowserLogger.debugWithData("IDTree_test-KaroshibeeReTree", $$String.concat(",", Belt_List.map(cids.contents, (function (pr) {
                                return "{" + (Identity$KaroshibeeReTree.ChildId.toString(pr[0]) + (":" + (Path$KaroshibeeReTree.Parents.toString(pr[1]) + "}")));
                              }))), /* tuple */[
                      "",
                      ""
                    ]);
                return Jest.Expect.toBe(8, Jest.Expect.expect(Belt_List.size(cids.contents)));
              }));
        return Jest.test("_getFromLeaf", (function (param) {
                      var cids1 = {
                        contents: /* [] */0
                      };
                      IDTree$KaroshibeeReTree._get(Belt_Option.getExn(IDTree$KaroshibeeReTree.getSubtree(t, path1, Identity$KaroshibeeReTree.FocusId.create("child1"))), path1, cids1, false);
                      BrowserLogger.debugWithData("IDTree_test-KaroshibeeReTree", $$String.concat(",", Belt_List.map(cids1.contents, (function (pr) {
                                      return "{" + (Identity$KaroshibeeReTree.ChildId.toString(pr[0]) + (":" + (Path$KaroshibeeReTree.Parents.toString(pr[1]) + "}")));
                                    }))), /* tuple */[
                            "",
                            ""
                          ]);
                      return Jest.Expect.toBe(1, Jest.Expect.expect(Belt_List.size(cids1.contents)));
                    }));
      }));

Jest.describe("getAllPaths", (function (param) {
        var path1 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "a",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "b",
                  /* [] */0
                ]
              ]
            ]);
        var path3 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "c",
                /* [] */0
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var id3 = Identity$KaroshibeeReTree.FocusId.create("child3");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path2, id2), path3, id3);
        Jest.test("gotAllPaths", (function (param) {
                var paths = IDTree$KaroshibeeReTree.getAllPaths(t);
                return Jest.Expect.toBe(8, Jest.Expect.expect(paths.length));
              }));
        Jest.test("gotAllIds", (function (param) {
                var paths = IDTree$KaroshibeeReTree.getAllIds(t);
                return Jest.Expect.toBe(8, Jest.Expect.expect(paths.length));
              }));
        Jest.test("gotChildPAths", (function (param) {
                var paths = IDTree$KaroshibeeReTree.getChildPaths(t, Path$KaroshibeeReTree.Parents.fromList(/* :: */[
                          "2",
                          /* [] */0
                        ]), false);
                return Jest.Expect.toBe(7, Jest.Expect.expect(paths.length));
              }));
        return Jest.test("gotChildPathsInclusive", (function (param) {
                      var paths = IDTree$KaroshibeeReTree.getChildPaths(t, Path$KaroshibeeReTree.Parents.fromList(/* :: */[
                                "2",
                                /* [] */0
                              ]), true);
                      return Jest.Expect.toBe(8, Jest.Expect.expect(paths.length));
                    }));
      }));

Jest.describe("subtrees", (function (param) {
        var path1 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "a",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "b",
                  /* [] */0
                ]
              ]
            ]);
        var path3 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "c",
                /* [] */0
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var id3 = Identity$KaroshibeeReTree.FocusId.create("child3");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path2, id2), path3, id3);
        var t1 = Belt_Option.getExn(IDTree$KaroshibeeReTree.getSubtree(t, Path$KaroshibeeReTree.Parents.moveUp(path1), Identity$KaroshibeeReTree.FocusId.create("a")));
        Jest.test("gotSubtree", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Caml_obj.caml_equal(IDTree$KaroshibeeReTree.myId(t1), Identity$KaroshibeeReTree.FocusId.create("a"))));
              }));
        Jest.test("gotSubtreeIds", (function (param) {
                BrowserLogger.debugWithData("IDTree_test-KaroshibeeReTree", "t1:" + IDTree$KaroshibeeReTree.toString(t1), /* tuple */[
                      "",
                      ""
                    ]);
                var cids = IDTree$KaroshibeeReTree.getAllIds(t1);
                return Jest.Expect.toBe(2, Jest.Expect.expect(cids.length));
              }));
        Jest.test("gotOneChildInSubtree", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t1))));
              }));
        Jest.test("gotChildInSubtree", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t1), Identity$KaroshibeeReTree.ChildId.create("child1"))));
              }));
        var t1$1 = Belt_Option.getExn(IDTree$KaroshibeeReTree.getSubtree(t, Path$KaroshibeeReTree.Parents.moveUp(Path$KaroshibeeReTree.Parents.moveUp(path1)), Identity$KaroshibeeReTree.FocusId.create("1")));
        Jest.test("gotSubtree2", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Caml_obj.caml_equal(IDTree$KaroshibeeReTree.myId(t1$1), Identity$KaroshibeeReTree.FocusId.create("1"))));
              }));
        Jest.test("gotTwoChildInSubtree", (function (param) {
                return Jest.Expect.toBe(2, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t1$1))));
              }));
        Jest.test("gotChildInSubtree1", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t1$1), Identity$KaroshibeeReTree.ChildId.create("a"))));
              }));
        return Jest.test("gotChildInSubtree2", (function (param) {
                      return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t1$1), Identity$KaroshibeeReTree.ChildId.create("b"))));
                    }));
      }));

Jest.describe("addSubtree", (function (param) {
        var path1 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "a",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "b",
                  /* [] */0
                ]
              ]
            ]);
        var path3 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "c",
                /* [] */0
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var id3 = Identity$KaroshibeeReTree.FocusId.create("child3");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path2, id2), path3, id3);
        var path4 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "3",
              /* :: */[
                "a",
                /* [] */0
              ]
            ]);
        var path5 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "3",
              /* :: */[
                "b",
                /* [] */0
              ]
            ]);
        var id4 = Identity$KaroshibeeReTree.FocusId.create("child4");
        var id5 = Identity$KaroshibeeReTree.FocusId.create("child5");
        var id6 = Identity$KaroshibeeReTree.FocusId.create("child6");
        var t2 = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path4, id4), path4, id5), path5, id6);
        var t3 = IDTree$KaroshibeeReTree.addSubtree(t, Identity$KaroshibeeReTree.FocusId.create("test"), path3, t2);
        BrowserLogger.debugWithData("IDTree_test-KaroshibeeReTree", "t3: " + IDTree$KaroshibeeReTree.toString(t3), /* tuple */[
              "",
              ""
            ]);
        var t4 = Belt_Option.getExn(IDTree$KaroshibeeReTree.getSubtree(t3, Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
                      "2",
                      /* :: */[
                        "c",
                        /* [] */0
                      ]
                    ]), Identity$KaroshibeeReTree.FocusId.create("test")));
        Jest.test("notAddedNewRootNode", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(IDTree$KaroshibeeReTree.isRoot(t4)));
              }));
        Jest.test("hasAddedNodeWithCorrectId", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Caml_obj.caml_equal(IDTree$KaroshibeeReTree.myId(t4), Identity$KaroshibeeReTree.FocusId.create("test"))));
              }));
        var _get = function (p1, p2) {
          return IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t4), Identity$KaroshibeeReTree.ChildId.create(p1))), Identity$KaroshibeeReTree.ChildId.create(p2)));
        };
        Jest.test("3aHasTwoChildren", (function (param) {
                return Jest.Expect.toBe(2, Jest.Expect.expect(Belt_Map.size(_get("3", "a"))));
              }));
        Jest.test("3aHasChild4", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(_get("3", "a"), Identity$KaroshibeeReTree.ChildId.create("child4"))));
              }));
        Jest.test("3aHasChild5", (function (param) {
                return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(_get("3", "a"), Identity$KaroshibeeReTree.ChildId.create("child5"))));
              }));
        Jest.test("3bHasOneChild", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Belt_Map.size(_get("3", "b"))));
              }));
        return Jest.test("3bHasChild6", (function (param) {
                      return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(_get("3", "b"), Identity$KaroshibeeReTree.ChildId.create("child6"))));
                    }));
      }));

Jest.describe("removeSubtree", (function (param) {
        var path1 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "a",
                  /* [] */0
                ]
              ]
            ]);
        var path2 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "1",
                /* :: */[
                  "b",
                  /* [] */0
                ]
              ]
            ]);
        var path3 = Path$KaroshibeeReTree.Parents.fromRootToPathList(/* :: */[
              "2",
              /* :: */[
                "c",
                /* [] */0
              ]
            ]);
        var id1 = Identity$KaroshibeeReTree.FocusId.create("child1");
        var id2 = Identity$KaroshibeeReTree.FocusId.create("child2");
        var id3 = Identity$KaroshibeeReTree.FocusId.create("child3");
        var t = IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.addChild(IDTree$KaroshibeeReTree.empty(/* () */0), path1, id1), path2, id2), path3, id3);
        var t1 = IDTree$KaroshibeeReTree.removeSubtree(t, Path$KaroshibeeReTree.Parents.moveUp(Path$KaroshibeeReTree.Parents.moveUp(path1)), Identity$KaroshibeeReTree.ChildId.create("1"));
        var t2 = Belt_Map.getExn(IDTree$KaroshibeeReTree.children(t1), Identity$KaroshibeeReTree.ChildId.create("2"));
        Jest.test("oneSubtreeRemoved", (function (param) {
                return Jest.Expect.toBe(1, Jest.Expect.expect(Belt_Map.size(IDTree$KaroshibeeReTree.children(t2))));
              }));
        Jest.test("subtreeIsNotInChildrenCollection", (function (param) {
                return Jest.Expect.toBe(false, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t2), Identity$KaroshibeeReTree.convertFocusToChild(Identity$KaroshibeeReTree.FocusId.create("1")))));
              }));
        return Jest.test("subtree2IsStillInChildrenCollection", (function (param) {
                      return Jest.Expect.toBe(true, Jest.Expect.expect(Belt_Map.has(IDTree$KaroshibeeReTree.children(t2), Identity$KaroshibeeReTree.convertFocusToChild(Identity$KaroshibeeReTree.FocusId.create("c")))));
                    }));
      }));

var M = /* alias */0;

var I = /* alias */0;

var ID = /* alias */0;

var CID = /* alias */0;

var PID = /* alias */0;

var P = /* alias */0;

exports.M = M;
exports.I = I;
exports.ID = ID;
exports.CID = CID;
exports.PID = PID;
exports.P = P;
/*  Not a pure module */
