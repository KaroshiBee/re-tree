// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Belt_Map = require("bs-platform/lib/js/belt_Map.js");
var Identity$KaroshibeeReTree = require("../src/Identity.bs.js");

Jest.describe("construction", (function (param) {
        Jest.test("canMakeFromString", (function (param) {
                var Id1 = Identity$KaroshibeeReTree.Make({ });
                var id1 = Curry._1(Id1.create, "hello");
                return Jest.Expect.toEqual("hello", Jest.Expect.expect(Curry._1(Id1.toString, id1)));
              }));
        Jest.test("canMakeMap", (function (param) {
                var Id = Identity$KaroshibeeReTree.Make({ });
                var key = Curry._1(Id.create, "key");
                var mp = Belt_Map.set(Curry._1(Id.$$Map.make, /* () */0), key, 1);
                return Jest.Expect.toEqual(1, Jest.Expect.expect(Belt_Map.get(mp, key)));
              }));
        return Jest.test("canMakeMap2", (function (param) {
                      var Id = Identity$KaroshibeeReTree.Make({ });
                      var key = Curry._1(Id.create, "key");
                      var mp = Belt_Map.set(Curry._1(Id.$$Map.make, /* () */0), key, 1);
                      return Jest.Expect.toEqual(undefined, Jest.Expect.expect(Belt_Map.get(mp, Curry._1(Id.create, "notthere"))));
                    }));
      }));

Jest.describe("conversion", (function (param) {
        Jest.test("childToParent", (function (param) {
                var id1 = Identity$KaroshibeeReTree.ChildId.create("child");
                return Jest.Expect.toEqual("child", Jest.Expect.expect(Identity$KaroshibeeReTree.ParentId.toString(Identity$KaroshibeeReTree.convertChildToParent(id1))));
              }));
        Jest.test("parentToChild", (function (param) {
                var id1 = Identity$KaroshibeeReTree.ParentId.create("parent");
                return Jest.Expect.toEqual("parent", Jest.Expect.expect(Identity$KaroshibeeReTree.ChildId.toString(Identity$KaroshibeeReTree.convertParentToChild(id1))));
              }));
        Jest.test("focusToParent", (function (param) {
                var id1 = Identity$KaroshibeeReTree.FocusId.create("id");
                return Jest.Expect.toEqual("id", Jest.Expect.expect(Identity$KaroshibeeReTree.ParentId.toString(Identity$KaroshibeeReTree.convertFocusToParent(id1))));
              }));
        Jest.test("focusToChild", (function (param) {
                var id1 = Identity$KaroshibeeReTree.FocusId.create("id");
                return Jest.Expect.toEqual("id", Jest.Expect.expect(Identity$KaroshibeeReTree.ChildId.toString(Identity$KaroshibeeReTree.convertFocusToChild(id1))));
              }));
        Jest.test("childToFocus", (function (param) {
                var id1 = Identity$KaroshibeeReTree.ChildId.create("child");
                return Jest.Expect.toEqual("child", Jest.Expect.expect(Identity$KaroshibeeReTree.FocusId.toString(Identity$KaroshibeeReTree.convertChildToFocus(id1))));
              }));
        Jest.test("parentToFocus", (function (param) {
                var id1 = Identity$KaroshibeeReTree.ParentId.create("parent");
                return Jest.Expect.toEqual("parent", Jest.Expect.expect(Identity$KaroshibeeReTree.FocusId.toString(Identity$KaroshibeeReTree.convertParentToFocus(id1))));
              }));
        return Jest.test("canInsertChildIntoParentMap", (function (param) {
                      var key = Identity$KaroshibeeReTree.ParentId.create("key1");
                      var mp = Belt_Map.set(Curry._1(Identity$KaroshibeeReTree.ParentId.$$Map.make, /* () */0), key, 1);
                      var childKey = Identity$KaroshibeeReTree.ChildId.create("key2");
                      var mp2 = Belt_Map.set(mp, Identity$KaroshibeeReTree.convertChildToParent(childKey), 2);
                      return Jest.Expect.toEqual(2, Jest.Expect.expect(Belt_Map.get(mp2, Identity$KaroshibeeReTree.ParentId.create("key2"))));
                    }));
      }));

var I = /* alias */0;

exports.I = I;
/*  Not a pure module */
